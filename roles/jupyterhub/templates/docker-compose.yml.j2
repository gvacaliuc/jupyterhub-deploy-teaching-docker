version: "2"

services:
  hub-db:
    image: {{ POSTGRES_DB_IMAGE }}
    container_name: jupyterhub-db
    restart: always
    environment:
      POSTGRES_DB: {{ POSTGRES_DB }}
      PGDATA: {{ DB_VOLUME_CONTAINER }}
    env_file:
      - secrets.env
    volumes:
      - "db:{{ DB_VOLUME_CONTAINER }}"

  hub:
    depends_on:
      - hub-db
    build:
      context: .
      dockerfile: {{ jh_dockerfile_fname }}
      args:
        JUPYTERHUB_VERSION: {{ JUPYTERHUB_VERSION }}
    restart: always
    image: jupyterhub
    container_name: jupyterhub
    volumes:
      # Bind Docker socket on the host so we can connect to the daemon from
      # within the container
      - "/var/run/docker.sock:/var/run/docker.sock:rw"
      # Bind Docker volume on host for JupyterHub database and cookie secrets
      - "data:{{ DATA_VOLUME_CONTAINER }}"
    ports:
      - "{{ jh_port_host }}:{{ jh_port_container }}"
    links:
      - hub-db
    environment:
      # All containers will join this network
      DOCKER_NETWORK_NAME: {{ DOCKER_NETWORK_NAME }}
      # JupyterHub will spawn this Notebook image for users
      DOCKER_NOTEBOOK_IMAGE: {{ LOCAL_NOTEBOOK_IMAGE }}
      # Notebook directory inside user image
      DOCKER_NOTEBOOK_DIR: {{ DOCKER_NOTEBOOK_DIR }}
      # Using this run command (optional)
      DOCKER_SPAWN_CMD: {{ DOCKER_SPAWN_CMD }}
      # Postgres db info
      POSTGRES_DB: {{ POSTGRES_DB }}
      POSTGRES_HOST: hub-db
    env_file:
      - secrets.env
    command: >
      jupyterhub -f /srv/jupyterhub/jupyterhub_config.py

volumes:
  data:
    external:
      name: {{ DATA_VOLUME_HOST }}
  db:
    external:
      name: {{ DB_VOLUME_HOST }}

networks:
  default:
    external:
      name: {{ DOCKER_NETWORK_NAME }}
