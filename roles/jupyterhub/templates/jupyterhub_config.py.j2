# vi: ft=python

# Copyright (c) Jupyter Development Team.
# Distributed under the terms of the Modified BSD License.

# Configuration file for JupyterHub

import os

c = get_config()

# We rely on environment variables to configure JupyterHub so that we
# avoid having to rebuild the JupyterHub container every time we change a
# configuration parameter.

# SPAWNER ---------------------------------------------------------------------

from imagespawner import DockerImageChooserSpawner

# Spawn single-user servers as Docker containers
c.JupyterHub.spawner_class = DockerImageChooserSpawner

c.DockerImageChooserSpawner.dockerimages = [
{% if jh_singleuser_images|length %}
{%- for image in jh_singleuser_images -%}
    "{{user}}",
{%- endfor -%}
{% else %}
    "jupyter/minimal-notebook"
{% endif %}
]

# # Spawn containers from this image
# c.DockerSpawner.image = os.environ['DOCKER_NOTEBOOK_IMAGE']

# JupyterHub requires a single-user instance of the Notebook server, so we
# default to using the `start-singleuser.sh` script included in the
# jupyter/docker-stacks *-notebook images as the Docker run command when
# spawning containers.  Optionally, you can override the Docker run command
# using the DOCKER_SPAWN_CMD environment variable.
spawn_cmd = os.environ.get('DOCKER_SPAWN_CMD', "start-singleuser.sh")
c.DockerImageChooserSpawner.extra_create_kwargs.update({ 'command': spawn_cmd })

# Connect containers to this Docker network
network_name = os.environ['DOCKER_NETWORK_NAME']
#c.DockerImageChooserSpawner.use_internal_ip = True
c.DockerImageChooserSpawner.network_name = network_name

# Pass the network name as argument to spawned containers
c.DockerImageChooserSpawner.extra_host_config = { 'network_mode': network_name }

# Explicitly set notebook directory because we'll be mounting a host volume to
# it.  Most jupyter/docker-stacks *-notebook images run the Notebook server as
# user `jovyan`, and set the notebook directory to `/home/jovyan/work`.
# We follow the same convention.
notebook_dir = os.environ.get('DOCKER_NOTEBOOK_DIR', '/home/jovyan/work')
c.DockerImageChooserSpawner.notebook_dir = notebook_dir

# Mount the real user's Docker volume on the host to the notebook user's
# notebook directory in the container
c.DockerImageChooserSpawner.volumes = { 'jupyterhub-user-{username}': notebook_dir }

# volume_driver is no longer a keyword argument to create_container()
# #c.DockerImageChooserSpawner.extra_create_kwargs.update({ 'volume_driver': 'local' })
# Remove containers once they are stopped
c.DockerImageChooserSpawner.remove_containers = True

# For debugging arguments passed to spawned containers
c.DockerImageChooserSpawner.debug = True

# NETWORKING ------------------------------------------------------------------

# User containers will access hub by container name on the Docker network
c.JupyterHub.hub_ip = 'jupyterhub'

## TLS config
#c.JupyterHub.port = 443
#c.JupyterHub.ssl_key = os.environ['SSL_KEY']
#c.JupyterHub.ssl_cert = os.environ['SSL_CERT']

# AUTHENTICATOR ---------------------------------------------------------------

# Authenticate users with GitHub OAuth
c.JupyterHub.authenticator_class = 'oauthenticator.GitHubOAuthenticator'
c.GitHubOAuthenticator.oauth_callback_url = os.environ['OAUTH_CALLBACK_URL']
c.GitHubOAuthenticator.client_id = os.environ['OAUTH_CLIENT_ID']
c.GitHubOAuthenticator.client_secret = os.environ['OAUTH_CLIENT_SECRET']

# Persist hub data on volume mounted inside container
data_dir = os.environ.get('DATA_VOLUME_CONTAINER', '/data')
c.JupyterHub.cookie_secret_file = os.path.join(data_dir,
    'jupyterhub_cookie_secret')

c.JupyterHub.db_url = 'postgresql://postgres:{password}@{host}/{db}'.format(
    host=os.environ['POSTGRES_HOST'],
    password=os.environ['POSTGRES_PASSWORD'],
    db=os.environ['POSTGRES_DB'],
)

# ADMIN / WHITELIST USERS -----------------------------------------------------

{% if jupyterhub_admin_users|length %}
c.Authenticator.admin_users = {
{%- for user in jupyterhub_admin_users -%}
    '{{user}}',
{%- endfor -%}
}
{% else %}
c.Authenticator.admin_users = set()
{% endif %}

{% if jupyterhub_users|length %}
c.Authenticator.whitelist = {
{%- for user in jupyterhub_users -%}
    '{{user}}',
{%- endfor -%}
}
{% else %}
c.Authenticator.whitelist = set()
{% endif %}
