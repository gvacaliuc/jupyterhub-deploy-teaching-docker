# vi: ft=python

# Copyright (c) Jupyter Development Team.
# Distributed under the terms of the Modified BSD License.

# Configuration file for JupyterHub

import os

c = get_config()

# We rely on environment variables to configure JupyterHub so that we
# avoid having to rebuild the JupyterHub container every time we change a
# configuration parameter.

# SPAWNER ---------------------------------------------------------------------

# Spawn single-user servers as Docker containers
c.JupyterHub.spawner_class = "dockerspawner.DockerSpawner"

c.DockerSpawner.image_whitelist = [
{% if jh_singleuser_images|length %}
{%- for image in jh_singleuser_images -%}
    "{{image}}",
{%- endfor -%}
{% else %}
    "jupyter/minimal-notebook",
{% endif %}
]

# # Spawn containers from this image
# c.DockerSpawner.image = os.environ["DOCKER_NOTEBOOK_IMAGE"]

# JupyterHub requires a single-user instance of the Notebook server, so we
# default to using the `start-singleuser.sh` script included in the
# jupyter/docker-stacks *-notebook images as the Docker run command when
# spawning containers.  Optionally, you can override the Docker run command
# using the DOCKER_SPAWN_CMD environment variable.
spawn_cmd = os.environ.get("DOCKER_SPAWN_CMD", "start-singleuser.sh")
c.DockerSpawner.extra_create_kwargs.update({ "command": spawn_cmd })

# Connect containers to this Docker network
network_name = os.environ["DOCKER_NETWORK_NAME"]
#c.DockerSpawner.use_internal_ip = True
c.DockerSpawner.network_name = network_name

# Pass the network name as argument to spawned containers
c.DockerSpawner.extra_host_config = { "network_mode": network_name }

# Explicitly set notebook directory because we"ll be mounting a host volume to
# it.  Most jupyter/docker-stacks *-notebook images run the Notebook server as
# user `jovyan`, and set the notebook directory to `/home/jovyan/work`.
# We follow the same convention.
notebook_dir = os.environ.get("DOCKER_NOTEBOOK_DIR", "/home/jovyan/work")
c.DockerSpawner.notebook_dir = notebook_dir

# Mount the real user"s Docker volume on the host to the notebook user"s
# notebook directory in the container
c.DockerSpawner.volumes = { "jupyterhub-user-{username}": notebook_dir }

# volume_driver is no longer a keyword argument to create_container()
# #c.DockerSpawner.extra_create_kwargs.update({ "volume_driver": "local" })
# Remove containers once they are stopped
c.DockerSpawner.remove_containers = True

# For debugging arguments passed to spawned containers
c.DockerSpawner.debug = True

# NETWORKING ------------------------------------------------------------------

# User containers will access hub by container name on the Docker network
c.JupyterHub.hub_ip = "jupyterhub"

## TLS config
c.JupyterHub.port = int("{{ jh_port_container }}")
c.JupyterHub.ssl_key = "/srv/jupyterhub/ssl/{{ jh_public_domain }}.pem"
c.JupyterHub.ssl_cert = "/srv/jupyterhub/ssl/{{ jh_public_domain }}.crt"

# AUTHENTICATOR ---------------------------------------------------------------

{% if 'oauth' in jh_authenticator %}
# Authenticate users with OAuth
c.JupyterHub.authenticator_class = "oauthenticator.GenericOAuthenticator"
c.GenericOAuthenticator.oauth_callback_url = os.environ["OAUTH_CALLBACK_URL"]
c.GenericOAuthenticator.client_id = os.environ["OAUTH_CLIENT_ID"]
c.GenericOAuthenticator.client_secret = os.environ["OAUTH_CLIENT_SECRET"]

# Authenticate users with CAS Authentication
{% elif 'cas' in jh_authenticator %}
c.JupyterHub.authenticator_class = "jhub_cas_authenticator.cas_auth.CASAuthenticator"

# The CAS URL to redirect unauthenticated users to.
c.CASAuthenticator.cas_login_url = os.environ["CAS_LOGIN_URL"]

# The service URL the CAS server will redirect the browser back to on successful authentication.
# If not set, this is set to the same URL the request comes in on.  This will work fine for
# simple deployments, but deployments behind a proxy or load banalncer will likely need to
# be adjusted so the CAS service redirects back to the *real* login URL for your Jupyterhub.
c.CASAuthenticator.cas_service_url = os.environ["CAS_SERVICE_URL"]

# Path to CA certificates the CAS client will trust when validating a service ticket.
# c.CASAuthenticator.cas_client_ca_certs = "/path/to/ca_certs.pem"

# The CAS endpoint for validating service tickets.
c.CASAuthenticator.cas_service_validate_url = os.environ["CAS_SERVICE_VALIDATE_URL"]

# A set of attribute name and value tuples a user must have to be allowed access.
# c.CASAuthenticator.cas_required_attribs = {("memberOf", "jupyterhub_users")}

{% endif %}

# Persist hub data on volume mounted inside container
data_dir = os.environ.get("DATA_VOLUME_CONTAINER", "/data")
c.JupyterHub.cookie_secret_file = os.path.join(data_dir,
    "jupyterhub_cookie_secret")

c.JupyterHub.db_url = "postgresql://postgres:{password}@{host}/{db}".format(
    host=os.environ["POSTGRES_HOST"],
    password=os.environ["POSTGRES_PASSWORD"],
    db=os.environ["POSTGRES_DB"],
)

# ADMIN / WHITELIST USERS -----------------------------------------------------

{% if jupyterhub_admin_users|length %}
c.Authenticator.admin_users = {
{%- for user in jupyterhub_admin_users -%}
    "{{user}}",
{%- endfor -%}
}
{% else %}
c.Authenticator.admin_users = set()
{% endif %}

{% if jupyterhub_users|length %}
c.Authenticator.whitelist = {
{%- for user in jupyterhub_users -%}
    "{{user}}",
{%- endfor -%}
}
{% else %}
c.Authenticator.whitelist = set()
{% endif %}

# HUB SERVICES

import sys

c.JupyterHub.services = [
    {
        'name': 'cull-idle',
        'admin': True,
        'command': [sys.executable, '{{ jh_root_dir }}/cull_idle_servers.py', '--timeout=3600'],
    }
]
